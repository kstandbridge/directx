// INCLUDES /////////////////////////////////////////////////////////////////////////////

// directx includes
#include <d2d1_3.h>

// c++ includes
#include <functional>

// bell0bytes
#include "buttons.h"
#include "sprites.h"


// CLASS METHODS ////////////////////////////////////////////////////////////////////////
namespace UI
{
	/////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////// Constructor and Destructor ////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	Button::Button(std::wstring name, graphics::AnimatedSprite* const sprite) : name(name), sprite(sprite), state(ButtonStates::Deselected)
	{

	}

	Button::Button(std::wstring name, graphics::AnimatedSprite* const sprite, std::function<bool()> onClick) : name(name), sprite(sprite), onClick(onClick), state(ButtonStates::Deselected)
	{

	}

	Button::~Button()
	{
		onClick = []() { return true; };
		delete this->sprite;
	}

	/////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////// Drawing ///////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	void Button::draw()
	{
		this->sprite->draw();
	}

	void Button::drawCentered(const float scaleFactor, const float offsetX, const float offsetY)
	{
		sprite->drawCentered(scaleFactor, offsetX, offsetY, &rect);
	}

	/////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////// Interaction ///////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	void Button::select()
	{
		state = ButtonStates::Selected;
		sprite->changeAnimation(1);
	}

	void Button::deselect()
	{
		state = ButtonStates::Deselected;
		sprite->changeAnimation(0);
	}

	bool Button::click()
	{
		state = ButtonStates::Clicked;
		return onClick();
	}

	void Button::setOnClickFunction(std::function<bool()> onClickFunction)
	{
		onClick = onClickFunction;
	}

	/////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////// Update ///////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	void Button::update(const double deltaTime)
	{
		sprite->updateAnimation(deltaTime);
	}
}